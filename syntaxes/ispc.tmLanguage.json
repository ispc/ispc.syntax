{
    "_copyright": "Copyright (c) 2025, Intel Corporation",
    "name": "ISPC",
    "scopeName": "source.ispc",
    "fileTypes": [
        "ispc",
        "isph"
    ],
    "patterns": [
        {
            "include": "#preprocessor"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#intrinsics"
        },
        {
            "include": "#pragmas"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#identifiers"
        }
    ],
    "repository": {
        "preprocessor": {
            "patterns": [
                {
                    "name": "meta.preprocessor.ispc",
                    "begin": "^\\s*#\\s*(include|define|undef|if(n?def)?|else|elif|endif|line|error|warning)\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.import.ispc"
                        }
                    },
                    "end": "(?=(?://|/\\*))|$",
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#identifiers"
                        }
                    ]
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.ispc",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.ispc"
                        }
                    }
                },
                {
                    "name": "comment.line.double-slash.ispc",
                    "begin": "//",
                    "end": "$",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.ispc"
                        }
                    }
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.ispc",
                    "begin": "L?\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.ispc",
                            "match": "\\\\(['\"?\\\\abfnrtv]|[0-7]{1,3}|x[0-9a-fA-F]+)"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.ispc",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.ispc",
                            "match": "\\\\(['\"?\\\\abfnrtv]|[0-7]{1,3}|x[0-9a-fA-F]+)"
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.hexadecimal.ispc",
                    "match": "\\b0[xX][0-9a-fA-F]+([uUlL]*[kMG]?[uUlL]*|\\.\\.\\.)?\\b"
                },
                {
                    "name": "constant.numeric.binary.ispc",
                    "match": "\\b0b[01]+([uUlL]*[kMG]?[uUlL]*|\\.\\.\\.)?\\b"
                },
                {
                    "name": "constant.numeric.float.hexadecimal.ispc",
                    "match": "\\b0[xX][01](\\.[0-9a-fA-F]*)?[pP][-+]?[0-9]+([dDfF]|[fF]16)?\\b"
                },
                {
                    "name": "constant.numeric.float.decimal.ispc",
                    "match": "\\b([0-9]+\\.[0-9]*|\\.[0-9]+)([dD]|[fF]|[fF]16)?\\b"
                },
                {
                    "name": "constant.numeric.float.scientific.ispc",
                    "match": "\\b([0-9]+|(([0-9]+\\.[0-9]*)|\\.[0-9]+))([eE][-+]?[0-9]+)([dD]|[fF]|[fF]16)?\\b"
                },
                {
                    "name": "constant.numeric.integer.decimal.ispc",
                    "match": "\\b[0-9]+([uUlL]*[kMG]?[uUlL]*|\\.\\.\\.)?\\b"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.ispc",
                    "match": "\\b(assert|break|case|cdo|cfor|cif|cwhile|continue|default|do|else|for|foreach|foreach_active|foreach_tiled|foreach_unique|goto|if|in|return|switch|sync|task|while|launch|invoke_sycl)\\b"
                },
                {
                    "name": "keyword.operator.ispc",
                    "match": "\\b(delete|new|sizeof|alloca)\\b"
                },
                {
                    "name": "storage.type.ispc",
                    "match": "\\b(bool|double|float|float16|int|uint|int8|uint8|int16|uint16|int32|uint32|int64|uint64|void|struct|enum|size_t|ptrdiff_t|intptr_t|uintptr_t)\\b"
                },
                {
                    "name": "storage.modifier.ispc",
                    "match": "\\b(const|extern|inline|noinline|static|uniform|unmasked|varying|template|typedef|typename|export|signed|unsigned|soa|__vectorcall|__regcall|__attribute__|volatile)\\b"
                },
                {
                    "name": "constant.language.ispc",
                    "match": "\\b(true|false|NULL|programIndex|programCount|threadIndex|threadIndex0|threadIndex1|threadIndex2|threadCount|taskIndex|taskIndex0|taskIndex1|taskIndex2|taskCount)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.ispc",
                    "match": "\\*=|\\+=|\\-=|/=|%=|&=|\\|=|\\^=|<<=|>>=|="
                },
                {
                    "name": "keyword.operator.logical.ispc",
                    "match": "&&|\\|\\||!"
                },
                {
                    "name": "keyword.operator.bitwise.ispc",
                    "match": "&|\\||\\^|~|<<|>>"
                },
                {
                    "name": "keyword.operator.comparison.ispc",
                    "match": "==|!=|<=|>=|<|>"
                },
                {
                    "name": "keyword.operator.other.ispc",
                    "match": "\\->|\\.|::|\\?"
                },
                {
                    "name": "keyword.operator.arithmetic.ispc",
                    "match": "\\+\\+|\\-\\-|[+\\-*/%]"
                }
            ]
        },
        "intrinsics": {
            "patterns": [
                {
                    "name": "support.function.intrinsic.ispc",
                    "match": "@llvm\\.[a-zA-Z_0-9\\.]*"
                }
            ]
        },
        "pragmas": {
            "patterns": [
                {
                    "name": "meta.preprocessor.pragma.ispc",
                    "begin": "#\\s*pragma\\s+",
                    "end": "$",
                    "patterns": [
                        {
                            "name": "keyword.control.pragma.ispc",
                            "match": "\\b(unroll|nounroll|ignore\\s+warning)\\b"
                        }
                    ]
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "meta.function.declaration.ispc",
                    "begin": "(?x)\n  (?:\\b(export|task|inline|noinline|uniform|varying)\\s+)*  # Optional modifiers\n  ([A-Za-z_][A-Za-z0-9_]*(?:<[^>]+>)?\\s+)*              # Return type with optional template\n  ([A-Za-z_][A-Za-z0-9_]*)\\s*                          # Function name\n  (?=\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.modifier.ispc"
                        },
                        "2": {
                            "name": "storage.type.ispc"
                        },
                        "3": {
                            "name": "entity.name.function.ispc"
                        }
                    },
                    "end": "(?<=\\})|(?=;)",
                    "patterns": [
                        {
                            "include": "#function-parameters"
                        },
                        {
                            "include": "#function-body"
                        }
                    ]
                },
                {
                    "name": "meta.function.pointer.ispc",
                    "begin": "(?x)\n\\b(uniform|varying)?\\s*\n([A-Za-z_][A-Za-z0-9_]*\\s+)\n(\\(\\s*\\*\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*\\))\\s*\\(",
                    "beginCaptures": {
                        "1": { "name": "storage.modifier.ispc" },
                        "2": { "name": "storage.type.ispc" },
                        "3": { "name": "meta.function.pointer.ispc" },
                        "4": { "name": "variable.other.ispc" }
                    },
                    "end": "\\)",
                    "patterns": [
                        {
                            "match": "(?x)\n  (?:\\b(uniform|varying)\\s+)*\n  ([A-Za-z_][A-Za-z0-9_]*(?:<[^>]+>)?\\s+)\n  ([A-Za-z_][A-Za-z0-9_]*)",
                            "captures": {
                                "1": { "name": "storage.modifier.ispc" },
                                "2": { "name": "storage.type.ispc" },
                                "3": { "name": "variable.parameter.ispc" }
                            }
                        },
                        {
                            "include": "#comments"
                        }
                    ]
                }
            ]
        },
        "function-parameters": {
            "name": "meta.function.parameters.ispc",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.parameters.begin.ispc"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.parameters.end.ispc"
                }
            },
            "patterns": [
                {
                    "match": "(?x)\n  (?:\\b(uniform|varying)\\s+)*\n  ([A-Za-z_][A-Za-z0-9_]*(?:<[^>]+>)?\\s+)\n  ([A-Za-z_][A-Za-z0-9_]*)\n  (?:\\s*(\\[\\s*\\])?)",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.ispc"
                        },
                        "2": {
                            "name": "storage.type.ispc"
                        },
                        "3": {
                            "name": "variable.parameter.ispc"
                        },
                        "4": {
                            "name": "meta.brackets.ispc"
                        }
                    }
                },
                {
                    "include": "#comments"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.parameter.ispc"
                }
            ]
        },
        "function-body": {
            "name": "meta.function.body.ispc",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.function.begin.ispc"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.function.end.ispc"
                }
            },
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.terminator.ispc",
                    "match": ";"
                },
                {
                    "name": "punctuation.section.block.begin.ispc",
                    "match": "\\{"
                },
                {
                    "name": "punctuation.section.block.end.ispc",
                    "match": "\\}"
                },
                {
                    "name": "punctuation.section.parens.begin.ispc",
                    "match": "\\("
                },
                {
                    "name": "punctuation.section.parens.end.ispc",
                    "match": "\\)"
                },
                {
                    "name": "punctuation.section.brackets.begin.ispc",
                    "match": "\\["
                },
                {
                    "name": "punctuation.section.brackets.end.ispc",
                    "match": "\\]"
                },
                {
                    "name": "punctuation.separator.colon.ispc",
                    "match": ":"
                },
                {
                    "name": "punctuation.separator.dot.ispc",
                    "match": "\\."
                },
                {
                    "name": "punctuation.separator.comma.ispc",
                    "match": ","
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "match": "\\boperator\\s*([+\\-*/=%<>&|^!~\\[\\]\\(\\)]+|\\w+)\\s*\\(",
                    "name": "entity.name.function.operator.ispc"
                },
                {
                    "match": "\\b[A-Z][A-Z0-9_]+\\b",
                    "name": "constant.other.ispc"
                },
                {
                    "match": "[a-zA-Z_][a-zA-Z_0-9]*",
                    "name": "variable.other.ispc"
                }
            ]
        }
    }
}